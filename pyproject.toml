[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-modular-blocks"
version = "0.1.0"
description = "Modular AI development blocks for building composable AI applications"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your-email@example.com"}
]
keywords = ["ai", "llm", "rag", "modular", "composable"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8.1"
dependencies = [
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "tenacity>=8.0.0",
    "prometheus-client>=0.15.0",
    "openai>=1.102.0",
    "dotenv>=0.9.9",
    "python-dotenv>=1.0.1",
    "pyyaml>=6.0.2",
]

[project.optional-dependencies]
openai = ["openai>=1.0.0"]
anthropic = ["anthropic>=0.21.0"]
pinecone = ["pinecone-client>=2.2.0"]
chroma = ["chromadb>=0.4.0"]
sentence-transformers = ["sentence-transformers>=2.2.0"]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
all = [
    "ai-modular-blocks[openai,anthropic,pinecone,chroma,sentence-transformers]"
]

[project.urls]
Homepage = "https://github.com/your-username/ai-modular-blocks"
Documentation = "https://github.com/your-username/ai-modular-blocks/wiki"
Repository = "https://github.com/your-username/ai-modular-blocks"
"Bug Tracker" = "https://github.com/your-username/ai-modular-blocks/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["ai_modular_blocks*"]

[tool.ruff]
# 启用所有推荐规则 + 额外的有用规则
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "N",   # pep8-naming
    "C90", # mccabe complexity
]

ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

# Same as Black
line-length = 88
target-version = "py38"

# Exclude directories
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
# Import排序配置
force-single-line = false
combine-as-imports = true
split-on-trailing-comma = true

[tool.mypy]
python_version = "3.8.1"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=ai_modular_blocks --cov-report=term-missing --cov-report=html"
asyncio_mode = "auto"

[dependency-groups]
dev = [
    "ruff>=0.12.11",
]
